// Code generated by MockGen. DO NOT EDIT.
// Source: db/adapter.go

// Package mock_adapter is a generated GoMock package.
package mock_adapter

import (
	json "encoding/json"
	gomock "github.com/golang/mock/gomock"
	auth "github.com/tinode/chat/server/auth"
	types "github.com/tinode/chat/server/store/types"
	reflect "reflect"
	time "time"
)

// MockAdapter is a mock of Adapter interface
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockAdapter) Open(config json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockAdapterMockRecorder) Open(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockAdapter)(nil).Open), config)
}

// Close mocks base method
func (m *MockAdapter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockAdapterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAdapter)(nil).Close))
}

// IsOpen mocks base method
func (m *MockAdapter) IsOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen
func (mr *MockAdapterMockRecorder) IsOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpen", reflect.TypeOf((*MockAdapter)(nil).IsOpen))
}

// GetDbVersion mocks base method
func (m *MockAdapter) GetDbVersion() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbVersion")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDbVersion indicates an expected call of GetDbVersion
func (mr *MockAdapterMockRecorder) GetDbVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbVersion", reflect.TypeOf((*MockAdapter)(nil).GetDbVersion))
}

// CheckDbVersion mocks base method
func (m *MockAdapter) CheckDbVersion() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDbVersion")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDbVersion indicates an expected call of CheckDbVersion
func (mr *MockAdapterMockRecorder) CheckDbVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDbVersion", reflect.TypeOf((*MockAdapter)(nil).CheckDbVersion))
}

// GetName mocks base method
func (m *MockAdapter) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockAdapterMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockAdapter)(nil).GetName))
}

// SetMaxResults mocks base method
func (m *MockAdapter) SetMaxResults(val int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxResults", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxResults indicates an expected call of SetMaxResults
func (mr *MockAdapterMockRecorder) SetMaxResults(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxResults", reflect.TypeOf((*MockAdapter)(nil).SetMaxResults), val)
}

// CreateDb mocks base method
func (m *MockAdapter) CreateDb(reset bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDb", reset)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDb indicates an expected call of CreateDb
func (mr *MockAdapterMockRecorder) CreateDb(reset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDb", reflect.TypeOf((*MockAdapter)(nil).CreateDb), reset)
}

// UpgradeDb mocks base method
func (m *MockAdapter) UpgradeDb() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeDb")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeDb indicates an expected call of UpgradeDb
func (mr *MockAdapterMockRecorder) UpgradeDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeDb", reflect.TypeOf((*MockAdapter)(nil).UpgradeDb))
}

// Version mocks base method
func (m *MockAdapter) Version() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockAdapterMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockAdapter)(nil).Version))
}

// UserCreate mocks base method
func (m *MockAdapter) UserCreate(user *types.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserCreate indicates an expected call of UserCreate
func (mr *MockAdapterMockRecorder) UserCreate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockAdapter)(nil).UserCreate), user)
}

// UserGet mocks base method
func (m *MockAdapter) UserGet(uid types.Uid) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", uid)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet
func (mr *MockAdapterMockRecorder) UserGet(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockAdapter)(nil).UserGet), uid)
}

// UserGetAll mocks base method
func (m *MockAdapter) UserGetAll(ids ...types.Uid) ([]types.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserGetAll", varargs...)
	ret0, _ := ret[0].([]types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetAll indicates an expected call of UserGetAll
func (mr *MockAdapterMockRecorder) UserGetAll(ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetAll", reflect.TypeOf((*MockAdapter)(nil).UserGetAll), ids...)
}

// UserDelete mocks base method
func (m *MockAdapter) UserDelete(uid types.Uid, hard bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", uid, hard)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDelete indicates an expected call of UserDelete
func (mr *MockAdapterMockRecorder) UserDelete(uid, hard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockAdapter)(nil).UserDelete), uid, hard)
}

// UserUpdate mocks base method
func (m *MockAdapter) UserUpdate(uid types.Uid, update map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", uid, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdate indicates an expected call of UserUpdate
func (mr *MockAdapterMockRecorder) UserUpdate(uid, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockAdapter)(nil).UserUpdate), uid, update)
}

// UserUpdateTags mocks base method
func (m *MockAdapter) UserUpdateTags(uid types.Uid, add, remove, reset []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateTags", uid, add, remove, reset)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdateTags indicates an expected call of UserUpdateTags
func (mr *MockAdapterMockRecorder) UserUpdateTags(uid, add, remove, reset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateTags", reflect.TypeOf((*MockAdapter)(nil).UserUpdateTags), uid, add, remove, reset)
}

// UserGetByCred mocks base method
func (m *MockAdapter) UserGetByCred(method, value string) (types.Uid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByCred", method, value)
	ret0, _ := ret[0].(types.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetByCred indicates an expected call of UserGetByCred
func (mr *MockAdapterMockRecorder) UserGetByCred(method, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByCred", reflect.TypeOf((*MockAdapter)(nil).UserGetByCred), method, value)
}

// UserUnreadCount mocks base method
func (m *MockAdapter) UserUnreadCount(uid types.Uid) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUnreadCount", uid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUnreadCount indicates an expected call of UserUnreadCount
func (mr *MockAdapterMockRecorder) UserUnreadCount(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUnreadCount", reflect.TypeOf((*MockAdapter)(nil).UserUnreadCount), uid)
}

// CredUpsert mocks base method
func (m *MockAdapter) CredUpsert(cred *types.Credential) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredUpsert", cred)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredUpsert indicates an expected call of CredUpsert
func (mr *MockAdapterMockRecorder) CredUpsert(cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredUpsert", reflect.TypeOf((*MockAdapter)(nil).CredUpsert), cred)
}

// CredGetActive mocks base method
func (m *MockAdapter) CredGetActive(uid types.Uid, method string) (*types.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredGetActive", uid, method)
	ret0, _ := ret[0].(*types.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredGetActive indicates an expected call of CredGetActive
func (mr *MockAdapterMockRecorder) CredGetActive(uid, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredGetActive", reflect.TypeOf((*MockAdapter)(nil).CredGetActive), uid, method)
}

// CredGetAll mocks base method
func (m *MockAdapter) CredGetAll(uid types.Uid, method string, validatedOnly bool) ([]types.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredGetAll", uid, method, validatedOnly)
	ret0, _ := ret[0].([]types.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredGetAll indicates an expected call of CredGetAll
func (mr *MockAdapterMockRecorder) CredGetAll(uid, method, validatedOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredGetAll", reflect.TypeOf((*MockAdapter)(nil).CredGetAll), uid, method, validatedOnly)
}

// CredDel mocks base method
func (m *MockAdapter) CredDel(uid types.Uid, method, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredDel", uid, method, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// CredDel indicates an expected call of CredDel
func (mr *MockAdapterMockRecorder) CredDel(uid, method, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredDel", reflect.TypeOf((*MockAdapter)(nil).CredDel), uid, method, value)
}

// CredConfirm mocks base method
func (m *MockAdapter) CredConfirm(uid types.Uid, method string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredConfirm", uid, method)
	ret0, _ := ret[0].(error)
	return ret0
}

// CredConfirm indicates an expected call of CredConfirm
func (mr *MockAdapterMockRecorder) CredConfirm(uid, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredConfirm", reflect.TypeOf((*MockAdapter)(nil).CredConfirm), uid, method)
}

// CredFail mocks base method
func (m *MockAdapter) CredFail(uid types.Uid, method string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredFail", uid, method)
	ret0, _ := ret[0].(error)
	return ret0
}

// CredFail indicates an expected call of CredFail
func (mr *MockAdapterMockRecorder) CredFail(uid, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredFail", reflect.TypeOf((*MockAdapter)(nil).CredFail), uid, method)
}

// AuthGetUniqueRecord mocks base method
func (m *MockAdapter) AuthGetUniqueRecord(unique string) (types.Uid, auth.Level, []byte, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthGetUniqueRecord", unique)
	ret0, _ := ret[0].(types.Uid)
	ret1, _ := ret[1].(auth.Level)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(time.Time)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// AuthGetUniqueRecord indicates an expected call of AuthGetUniqueRecord
func (mr *MockAdapterMockRecorder) AuthGetUniqueRecord(unique interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthGetUniqueRecord", reflect.TypeOf((*MockAdapter)(nil).AuthGetUniqueRecord), unique)
}

// AuthGetRecord mocks base method
func (m *MockAdapter) AuthGetRecord(user types.Uid, scheme string) (string, auth.Level, []byte, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthGetRecord", user, scheme)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(auth.Level)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(time.Time)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// AuthGetRecord indicates an expected call of AuthGetRecord
func (mr *MockAdapterMockRecorder) AuthGetRecord(user, scheme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthGetRecord", reflect.TypeOf((*MockAdapter)(nil).AuthGetRecord), user, scheme)
}

// AuthAddRecord mocks base method
func (m *MockAdapter) AuthAddRecord(user types.Uid, scheme, unique string, authLvl auth.Level, secret []byte, expires time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthAddRecord", user, scheme, unique, authLvl, secret, expires)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthAddRecord indicates an expected call of AuthAddRecord
func (mr *MockAdapterMockRecorder) AuthAddRecord(user, scheme, unique, authLvl, secret, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthAddRecord", reflect.TypeOf((*MockAdapter)(nil).AuthAddRecord), user, scheme, unique, authLvl, secret, expires)
}

// AuthDelScheme mocks base method
func (m *MockAdapter) AuthDelScheme(user types.Uid, scheme string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthDelScheme", user, scheme)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthDelScheme indicates an expected call of AuthDelScheme
func (mr *MockAdapterMockRecorder) AuthDelScheme(user, scheme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthDelScheme", reflect.TypeOf((*MockAdapter)(nil).AuthDelScheme), user, scheme)
}

// AuthDelAllRecords mocks base method
func (m *MockAdapter) AuthDelAllRecords(uid types.Uid) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthDelAllRecords", uid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthDelAllRecords indicates an expected call of AuthDelAllRecords
func (mr *MockAdapterMockRecorder) AuthDelAllRecords(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthDelAllRecords", reflect.TypeOf((*MockAdapter)(nil).AuthDelAllRecords), uid)
}

// AuthUpdRecord mocks base method
func (m *MockAdapter) AuthUpdRecord(user types.Uid, scheme, unique string, authLvl auth.Level, secret []byte, expires time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUpdRecord", user, scheme, unique, authLvl, secret, expires)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthUpdRecord indicates an expected call of AuthUpdRecord
func (mr *MockAdapterMockRecorder) AuthUpdRecord(user, scheme, unique, authLvl, secret, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUpdRecord", reflect.TypeOf((*MockAdapter)(nil).AuthUpdRecord), user, scheme, unique, authLvl, secret, expires)
}

// TopicCreate mocks base method
func (m *MockAdapter) TopicCreate(topic *types.Topic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicCreate", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopicCreate indicates an expected call of TopicCreate
func (mr *MockAdapterMockRecorder) TopicCreate(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicCreate", reflect.TypeOf((*MockAdapter)(nil).TopicCreate), topic)
}

// TopicCreateP2P mocks base method
func (m *MockAdapter) TopicCreateP2P(initiator, invited *types.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicCreateP2P", initiator, invited)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopicCreateP2P indicates an expected call of TopicCreateP2P
func (mr *MockAdapterMockRecorder) TopicCreateP2P(initiator, invited interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicCreateP2P", reflect.TypeOf((*MockAdapter)(nil).TopicCreateP2P), initiator, invited)
}

// TopicGet mocks base method
func (m *MockAdapter) TopicGet(topic string) (*types.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicGet", topic)
	ret0, _ := ret[0].(*types.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicGet indicates an expected call of TopicGet
func (mr *MockAdapterMockRecorder) TopicGet(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicGet", reflect.TypeOf((*MockAdapter)(nil).TopicGet), topic)
}

// TopicsForUser mocks base method
func (m *MockAdapter) TopicsForUser(uid types.Uid, keepDeleted bool, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicsForUser", uid, keepDeleted, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicsForUser indicates an expected call of TopicsForUser
func (mr *MockAdapterMockRecorder) TopicsForUser(uid, keepDeleted, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicsForUser", reflect.TypeOf((*MockAdapter)(nil).TopicsForUser), uid, keepDeleted, opts)
}

// UsersForTopic mocks base method
func (m *MockAdapter) UsersForTopic(topic string, keepDeleted bool, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersForTopic", topic, keepDeleted, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersForTopic indicates an expected call of UsersForTopic
func (mr *MockAdapterMockRecorder) UsersForTopic(topic, keepDeleted, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersForTopic", reflect.TypeOf((*MockAdapter)(nil).UsersForTopic), topic, keepDeleted, opts)
}

// OwnTopics mocks base method
func (m *MockAdapter) OwnTopics(uid types.Uid) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnTopics", uid)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnTopics indicates an expected call of OwnTopics
func (mr *MockAdapterMockRecorder) OwnTopics(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnTopics", reflect.TypeOf((*MockAdapter)(nil).OwnTopics), uid)
}

// TopicShare mocks base method
func (m *MockAdapter) TopicShare(subs []*types.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicShare", subs)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopicShare indicates an expected call of TopicShare
func (mr *MockAdapterMockRecorder) TopicShare(subs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicShare", reflect.TypeOf((*MockAdapter)(nil).TopicShare), subs)
}

// TopicDelete mocks base method
func (m *MockAdapter) TopicDelete(topic string, hard bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicDelete", topic, hard)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopicDelete indicates an expected call of TopicDelete
func (mr *MockAdapterMockRecorder) TopicDelete(topic, hard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicDelete", reflect.TypeOf((*MockAdapter)(nil).TopicDelete), topic, hard)
}

// TopicUpdateOnMessage mocks base method
func (m *MockAdapter) TopicUpdateOnMessage(topic string, msg *types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicUpdateOnMessage", topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopicUpdateOnMessage indicates an expected call of TopicUpdateOnMessage
func (mr *MockAdapterMockRecorder) TopicUpdateOnMessage(topic, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicUpdateOnMessage", reflect.TypeOf((*MockAdapter)(nil).TopicUpdateOnMessage), topic, msg)
}

// TopicUpdate mocks base method
func (m *MockAdapter) TopicUpdate(topic string, update map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicUpdate", topic, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopicUpdate indicates an expected call of TopicUpdate
func (mr *MockAdapterMockRecorder) TopicUpdate(topic, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicUpdate", reflect.TypeOf((*MockAdapter)(nil).TopicUpdate), topic, update)
}

// TopicOwnerChange mocks base method
func (m *MockAdapter) TopicOwnerChange(topic string, newOwner types.Uid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicOwnerChange", topic, newOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopicOwnerChange indicates an expected call of TopicOwnerChange
func (mr *MockAdapterMockRecorder) TopicOwnerChange(topic, newOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicOwnerChange", reflect.TypeOf((*MockAdapter)(nil).TopicOwnerChange), topic, newOwner)
}

// SubscriptionGet mocks base method
func (m *MockAdapter) SubscriptionGet(topic string, user types.Uid) (*types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionGet", topic, user)
	ret0, _ := ret[0].(*types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscriptionGet indicates an expected call of SubscriptionGet
func (mr *MockAdapterMockRecorder) SubscriptionGet(topic, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionGet", reflect.TypeOf((*MockAdapter)(nil).SubscriptionGet), topic, user)
}

// SubsForUser mocks base method
func (m *MockAdapter) SubsForUser(user types.Uid, keepDeleted bool, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubsForUser", user, keepDeleted, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubsForUser indicates an expected call of SubsForUser
func (mr *MockAdapterMockRecorder) SubsForUser(user, keepDeleted, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubsForUser", reflect.TypeOf((*MockAdapter)(nil).SubsForUser), user, keepDeleted, opts)
}

// SubsForTopic mocks base method
func (m *MockAdapter) SubsForTopic(topic string, keepDeleted bool, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubsForTopic", topic, keepDeleted, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubsForTopic indicates an expected call of SubsForTopic
func (mr *MockAdapterMockRecorder) SubsForTopic(topic, keepDeleted, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubsForTopic", reflect.TypeOf((*MockAdapter)(nil).SubsForTopic), topic, keepDeleted, opts)
}

// SubsUpdate mocks base method
func (m *MockAdapter) SubsUpdate(topic string, user types.Uid, update map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubsUpdate", topic, user, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubsUpdate indicates an expected call of SubsUpdate
func (mr *MockAdapterMockRecorder) SubsUpdate(topic, user, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubsUpdate", reflect.TypeOf((*MockAdapter)(nil).SubsUpdate), topic, user, update)
}

// SubsDelete mocks base method
func (m *MockAdapter) SubsDelete(topic string, user types.Uid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubsDelete", topic, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubsDelete indicates an expected call of SubsDelete
func (mr *MockAdapterMockRecorder) SubsDelete(topic, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubsDelete", reflect.TypeOf((*MockAdapter)(nil).SubsDelete), topic, user)
}

// SubsDelForTopic mocks base method
func (m *MockAdapter) SubsDelForTopic(topic string, hard bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubsDelForTopic", topic, hard)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubsDelForTopic indicates an expected call of SubsDelForTopic
func (mr *MockAdapterMockRecorder) SubsDelForTopic(topic, hard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubsDelForTopic", reflect.TypeOf((*MockAdapter)(nil).SubsDelForTopic), topic, hard)
}

// SubsDelForUser mocks base method
func (m *MockAdapter) SubsDelForUser(user types.Uid, hard bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubsDelForUser", user, hard)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubsDelForUser indicates an expected call of SubsDelForUser
func (mr *MockAdapterMockRecorder) SubsDelForUser(user, hard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubsDelForUser", reflect.TypeOf((*MockAdapter)(nil).SubsDelForUser), user, hard)
}

// FindUsers mocks base method
func (m *MockAdapter) FindUsers(user types.Uid, req [][]string, opt []string) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", user, req, opt)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers
func (mr *MockAdapterMockRecorder) FindUsers(user, req, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockAdapter)(nil).FindUsers), user, req, opt)
}

// FindTopics mocks base method
func (m *MockAdapter) FindTopics(req [][]string, opt []string) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopics", req, opt)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopics indicates an expected call of FindTopics
func (mr *MockAdapterMockRecorder) FindTopics(req, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopics", reflect.TypeOf((*MockAdapter)(nil).FindTopics), req, opt)
}

// MessageSave mocks base method
func (m *MockAdapter) MessageSave(msg *types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSave", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageSave indicates an expected call of MessageSave
func (mr *MockAdapterMockRecorder) MessageSave(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSave", reflect.TypeOf((*MockAdapter)(nil).MessageSave), msg)
}

// MessageGetAll mocks base method
func (m *MockAdapter) MessageGetAll(topic string, forUser types.Uid, opts *types.QueryOpt) ([]types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGetAll", topic, forUser, opts)
	ret0, _ := ret[0].([]types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGetAll indicates an expected call of MessageGetAll
func (mr *MockAdapterMockRecorder) MessageGetAll(topic, forUser, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGetAll", reflect.TypeOf((*MockAdapter)(nil).MessageGetAll), topic, forUser, opts)
}

// MessageDeleteList mocks base method
func (m *MockAdapter) MessageDeleteList(topic string, toDel *types.DelMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageDeleteList", topic, toDel)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageDeleteList indicates an expected call of MessageDeleteList
func (mr *MockAdapterMockRecorder) MessageDeleteList(topic, toDel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageDeleteList", reflect.TypeOf((*MockAdapter)(nil).MessageDeleteList), topic, toDel)
}

// MessageGetDeleted mocks base method
func (m *MockAdapter) MessageGetDeleted(topic string, forUser types.Uid, opts *types.QueryOpt) ([]types.DelMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGetDeleted", topic, forUser, opts)
	ret0, _ := ret[0].([]types.DelMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGetDeleted indicates an expected call of MessageGetDeleted
func (mr *MockAdapterMockRecorder) MessageGetDeleted(topic, forUser, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGetDeleted", reflect.TypeOf((*MockAdapter)(nil).MessageGetDeleted), topic, forUser, opts)
}

// MessageAttachments mocks base method
func (m *MockAdapter) MessageAttachments(msgId types.Uid, fids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageAttachments", msgId, fids)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageAttachments indicates an expected call of MessageAttachments
func (mr *MockAdapterMockRecorder) MessageAttachments(msgId, fids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAttachments", reflect.TypeOf((*MockAdapter)(nil).MessageAttachments), msgId, fids)
}

// DeviceUpsert mocks base method
func (m *MockAdapter) DeviceUpsert(uid types.Uid, dev *types.DeviceDef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceUpsert", uid, dev)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeviceUpsert indicates an expected call of DeviceUpsert
func (mr *MockAdapterMockRecorder) DeviceUpsert(uid, dev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceUpsert", reflect.TypeOf((*MockAdapter)(nil).DeviceUpsert), uid, dev)
}

// DeviceGetAll mocks base method
func (m *MockAdapter) DeviceGetAll(uid ...types.Uid) (map[types.Uid][]types.DeviceDef, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range uid {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeviceGetAll", varargs...)
	ret0, _ := ret[0].(map[types.Uid][]types.DeviceDef)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeviceGetAll indicates an expected call of DeviceGetAll
func (mr *MockAdapterMockRecorder) DeviceGetAll(uid ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetAll", reflect.TypeOf((*MockAdapter)(nil).DeviceGetAll), uid...)
}

// DeviceDelete mocks base method
func (m *MockAdapter) DeviceDelete(uid types.Uid, deviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceDelete", uid, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeviceDelete indicates an expected call of DeviceDelete
func (mr *MockAdapterMockRecorder) DeviceDelete(uid, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceDelete", reflect.TypeOf((*MockAdapter)(nil).DeviceDelete), uid, deviceID)
}

// FileStartUpload mocks base method
func (m *MockAdapter) FileStartUpload(fd *types.FileDef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileStartUpload", fd)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileStartUpload indicates an expected call of FileStartUpload
func (mr *MockAdapterMockRecorder) FileStartUpload(fd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileStartUpload", reflect.TypeOf((*MockAdapter)(nil).FileStartUpload), fd)
}

// FileFinishUpload mocks base method
func (m *MockAdapter) FileFinishUpload(fid string, status int, size int64) (*types.FileDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileFinishUpload", fid, status, size)
	ret0, _ := ret[0].(*types.FileDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileFinishUpload indicates an expected call of FileFinishUpload
func (mr *MockAdapterMockRecorder) FileFinishUpload(fid, status, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileFinishUpload", reflect.TypeOf((*MockAdapter)(nil).FileFinishUpload), fid, status, size)
}

// FileGet mocks base method
func (m *MockAdapter) FileGet(fid string) (*types.FileDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileGet", fid)
	ret0, _ := ret[0].(*types.FileDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileGet indicates an expected call of FileGet
func (mr *MockAdapterMockRecorder) FileGet(fid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileGet", reflect.TypeOf((*MockAdapter)(nil).FileGet), fid)
}

// FileDeleteUnused mocks base method
func (m *MockAdapter) FileDeleteUnused(olderThan time.Time, limit int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileDeleteUnused", olderThan, limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileDeleteUnused indicates an expected call of FileDeleteUnused
func (mr *MockAdapterMockRecorder) FileDeleteUnused(olderThan, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileDeleteUnused", reflect.TypeOf((*MockAdapter)(nil).FileDeleteUnused), olderThan, limit)
}
